From 4294fabb0f7b69e2e7b3628b06bcab8b16657df4 Mon Sep 17 00:00:00 2001
From: Euphyllia Bierque <bierque.euphyllia@gmail.com>
Date: Mon, 9 Dec 2024 14:08:22 +0100
Subject: [PATCH 2/4] Replace Scheduler

---
 .../api/concurrent/ChunkTeleport.java         |  2 +-
 .../api/concurrent/count/TickResetCount.java  | 11 +++++----
 .../notifications/BossBarNotification.java    |  5 ++--
 .../insights/api/tasks/ScanTask.java          |  7 +++---
 .../dev/frankheijden/insights/Insights.java   | 24 ++++++++++---------
 .../insights/listeners/BlockListener.java     |  2 +-
 .../insights/tasks/PlayerTrackerTask.java     |  2 +-
 7 files changed, 29 insertions(+), 24 deletions(-)

diff --git a/Insights-API/src/main/java/dev/frankheijden/insights/api/concurrent/ChunkTeleport.java b/Insights-API/src/main/java/dev/frankheijden/insights/api/concurrent/ChunkTeleport.java
index 4ab382e..ed1d581 100644
--- a/Insights-API/src/main/java/dev/frankheijden/insights/api/concurrent/ChunkTeleport.java
+++ b/Insights-API/src/main/java/dev/frankheijden/insights/api/concurrent/ChunkTeleport.java
@@ -30,7 +30,7 @@ public class ChunkTeleport {
                 return;
             }
 
-            plugin.getServer().getScheduler().runTask(plugin, () -> {
+            plugin.getServer().getRegionScheduler().execute(plugin, world, x, z, () -> {
                 int blockX = (x << 4) + 8;
                 int blockZ = (z << 4) + 8;
                 int blockY = world.getHighestBlockYAt(blockX, blockZ, HeightMap.MOTION_BLOCKING) + 1;
diff --git a/Insights-API/src/main/java/dev/frankheijden/insights/api/concurrent/count/TickResetCount.java b/Insights-API/src/main/java/dev/frankheijden/insights/api/concurrent/count/TickResetCount.java
index 7a7dc27..8847302 100644
--- a/Insights-API/src/main/java/dev/frankheijden/insights/api/concurrent/count/TickResetCount.java
+++ b/Insights-API/src/main/java/dev/frankheijden/insights/api/concurrent/count/TickResetCount.java
@@ -12,7 +12,7 @@ public class TickResetCount<T> {
     private final int size;
     private final Map<T, IntegerCount> counts;
     private final ResetTask resetTask;
-    private BukkitTask bukkitTask = null;
+    private io.papermc.paper.threadedregions.scheduler.ScheduledTask bukkitTask = null;
 
     /**
      * Constructs a new TickResetCount.
@@ -34,11 +34,12 @@ public class TickResetCount<T> {
             throw new IllegalStateException("ResetTask is already running!");
         }
 
-        this.bukkitTask = plugin.getServer().getScheduler().runTaskTimerAsynchronously(
+        this.bukkitTask = plugin.getServer().getAsyncScheduler().runAtFixedRate(
                 plugin,
-                resetTask,
-                0,
-                intervalTicks
+                scheduledTask -> resetTask.run(),
+                1 * 50,
+                intervalTicks * 50,
+                java.util.concurrent.TimeUnit.MILLISECONDS
         );
     }
 
diff --git a/Insights-API/src/main/java/dev/frankheijden/insights/api/config/notifications/BossBarNotification.java b/Insights-API/src/main/java/dev/frankheijden/insights/api/config/notifications/BossBarNotification.java
index 0ad5823..6bcd616 100644
--- a/Insights-API/src/main/java/dev/frankheijden/insights/api/config/notifications/BossBarNotification.java
+++ b/Insights-API/src/main/java/dev/frankheijden/insights/api/config/notifications/BossBarNotification.java
@@ -20,7 +20,7 @@ public class BossBarNotification implements Notification {
     protected final Queue<Audience> viewers = new LinkedList<>();
     protected final int ticks;
     protected final Runnable bossBarClearer;
-    protected BukkitTask task;
+    protected io.papermc.paper.threadedregions.scheduler.ScheduledTask task;
 
     protected BossBarNotification(InsightsPlugin plugin, BossBar bossBar, Messages.Message content, int ticks) {
         this.plugin = plugin;
@@ -55,7 +55,8 @@ public class BossBarNotification implements Notification {
                     audience.showBossBar(bossBar);
                     viewers.add(audience);
                 }
-                task = Bukkit.getScheduler().runTaskLater(plugin, bossBarClearer, ticks);
+                task = Bukkit.getGlobalRegionScheduler()
+                        .runDelayed(plugin, scheduledTask -> bossBarClearer.run(), ticks);
             }
         };
     }
diff --git a/Insights-API/src/main/java/dev/frankheijden/insights/api/tasks/ScanTask.java b/Insights-API/src/main/java/dev/frankheijden/insights/api/tasks/ScanTask.java
index fa76919..f8f178e 100644
--- a/Insights-API/src/main/java/dev/frankheijden/insights/api/tasks/ScanTask.java
+++ b/Insights-API/src/main/java/dev/frankheijden/insights/api/tasks/ScanTask.java
@@ -51,7 +51,7 @@ public class ScanTask<R> implements Runnable {
     private final AtomicBoolean completedExceptionally = new AtomicBoolean();
     private final int chunkCount;
     private long lastInfo = 0;
-    private BukkitTask task;
+    private io.papermc.paper.threadedregions.scheduler.ScheduledTask task;
 
     /**
      * Creates a new ScanTask to scan a collection of ChunkPart's.
@@ -370,8 +370,9 @@ public class ScanTask<R> implements Runnable {
     }
 
     private void start() {
-        BukkitScheduler scheduler = plugin.getServer().getScheduler();
-        task = scheduler.runTaskTimer(plugin, this, 0, plugin.getSettings().SCANS_ITERATION_INTERVAL_TICKS);
+        io.papermc.paper.threadedregions.scheduler.GlobalRegionScheduler scheduler = plugin.getServer().getGlobalRegionScheduler();
+        task = scheduler.runAtFixedRate(plugin, scheduledTask -> this.run(), 1,
+                plugin.getSettings().SCANS_ITERATION_INTERVAL_TICKS);
     }
 
     private void cancel() {
diff --git a/Insights/src/main/java/dev/frankheijden/insights/Insights.java b/Insights/src/main/java/dev/frankheijden/insights/Insights.java
index 5cd57c0..b130732 100644
--- a/Insights/src/main/java/dev/frankheijden/insights/Insights.java
+++ b/Insights/src/main/java/dev/frankheijden/insights/Insights.java
@@ -83,8 +83,8 @@ public class Insights extends InsightsPlugin {
     private ScanHistory scanHistory;
     private ListenerManager listenerManager;
     private InsightsPlaceholderExpansion placeholderExpansion;
-    private BukkitTask playerTracker = null;
-    private BukkitTask updateChecker = null;
+    private io.papermc.paper.threadedregions.scheduler.ScheduledTask playerTracker = null;
+    private io.papermc.paper.threadedregions.scheduler.ScheduledTask updateChecker = null;
     private BukkitAudiences audiences = null;
     private RedstoneUpdateCount redstoneUpdateCount = null;
     private ChunkTeleport chunkTeleport;
@@ -117,7 +117,7 @@ public class Insights extends InsightsPlugin {
             ex.printStackTrace();
         }
 
-        getServer().getScheduler().runTaskLater(this, () -> {
+        getServer().getGlobalRegionScheduler().runDelayed(this, (scheduledTask) -> {
             try {
                 addonManager.loadAddons();
             } catch (IOException ex) {
@@ -379,11 +379,12 @@ public class Insights extends InsightsPlugin {
         }
 
         if (settings.CHUNK_SCANS_MODE == Settings.ChunkScanMode.ALWAYS) {
-            playerTracker = getServer().getScheduler().runTaskTimerAsynchronously(
+            playerTracker = getServer().getAsyncScheduler().runAtFixedRate(
                     this,
-                    new PlayerTrackerTask(this),
-                    0,
-                    settings.CHUNK_SCANS_PLAYER_TRACKER_INTERVAL_TICKS
+                    scheduledTask -> new PlayerTrackerTask(this).run(),
+                    1 * 50,
+                    settings.CHUNK_SCANS_PLAYER_TRACKER_INTERVAL_TICKS * 50,
+                    java.util.concurrent.TimeUnit.MILLISECONDS
             );
         }
 
@@ -392,11 +393,12 @@ public class Insights extends InsightsPlugin {
         }
 
         if (settings.UPDATE_CHECKER_ENABLED) {
-            updateChecker = getServer().getScheduler().runTaskTimerAsynchronously(
+            updateChecker = getServer().getAsyncScheduler().runAtFixedRate(
                     this,
-                    new UpdateCheckerTask(this),
-                    20,
-                    20L * settings.UPDATE_CHECKER_INTERVAL_SECONDS
+                    scheduledTask -> new UpdateCheckerTask(this).run(),
+                    20 * 50,
+                    20L * settings.UPDATE_CHECKER_INTERVAL_SECONDS * 50,
+                    java.util.concurrent.TimeUnit.MILLISECONDS
             );
         }
 
diff --git a/Insights/src/main/java/dev/frankheijden/insights/listeners/BlockListener.java b/Insights/src/main/java/dev/frankheijden/insights/listeners/BlockListener.java
index efd8624..4ecf365 100644
--- a/Insights/src/main/java/dev/frankheijden/insights/listeners/BlockListener.java
+++ b/Insights/src/main/java/dev/frankheijden/insights/listeners/BlockListener.java
@@ -338,7 +338,7 @@ public class BlockListener extends InsightsListener {
             materials[i] = material;
         }
 
-        plugin.getServer().getScheduler().runTaskLater(plugin, () -> {
+        plugin.getServer().getGlobalRegionScheduler().runDelayed(plugin, (scheduledTask) -> {
             for (var i = 0; i < blocks.size(); i++) {
                 var relative = blocks.get(i).getRelative(event.getDirection());
                 var material = relative.getType();
diff --git a/Insights/src/main/java/dev/frankheijden/insights/tasks/PlayerTrackerTask.java b/Insights/src/main/java/dev/frankheijden/insights/tasks/PlayerTrackerTask.java
index 9603f13..871003a 100644
--- a/Insights/src/main/java/dev/frankheijden/insights/tasks/PlayerTrackerTask.java
+++ b/Insights/src/main/java/dev/frankheijden/insights/tasks/PlayerTrackerTask.java
@@ -46,7 +46,7 @@ public class PlayerTrackerTask extends InsightsAsyncTask {
             return;
         }
 
-        plugin.getServer().getScheduler().runTask(plugin, () -> {
+        plugin.getServer().getGlobalRegionScheduler().execute(plugin, () -> {
             long now = System.nanoTime();
             for (ChunkLocation loc : locations) {
                 var world = loc.getWorld();
-- 
2.47.1.windows.1

